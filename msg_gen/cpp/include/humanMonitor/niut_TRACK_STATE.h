/* Auto-generated by genmsg_cpp for file /home/mfiore/catkin_ws/src/humanMonitor/msg/niut_TRACK_STATE.msg */
#ifndef HUMANMONITOR_MESSAGE_NIUT_TRACK_STATE_H
#define HUMANMONITOR_MESSAGE_NIUT_TRACK_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace humanMonitor
{
template <class ContainerAllocator>
struct niut_TRACK_STATE_ {
  typedef niut_TRACK_STATE_<ContainerAllocator> Type;

  niut_TRACK_STATE_()
  : value(0)
  {
  }

  niut_TRACK_STATE_(const ContainerAllocator& _alloc)
  : value(0)
  {
  }

  typedef uint32_t _value_type;
  uint32_t value;

  enum { niut_NO_TRACKING = 0 };
  enum { niut_POSE_SEARCH = 1 };
  enum { niut_CALIBRATE = 2 };
  enum { niut_TRACKING = 3 };

  typedef boost::shared_ptr< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct niut_TRACK_STATE
typedef  ::humanMonitor::niut_TRACK_STATE_<std::allocator<void> > niut_TRACK_STATE;

typedef boost::shared_ptr< ::humanMonitor::niut_TRACK_STATE> niut_TRACK_STATEPtr;
typedef boost::shared_ptr< ::humanMonitor::niut_TRACK_STATE const> niut_TRACK_STATEConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace humanMonitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f590b5cd751e2c0d69fe35f4a3b66d8";
  }

  static const char* value(const  ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2f590b5cd751e2c0ULL;
  static const uint64_t static_value2 = 0xd69fe35f4a3b66d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanMonitor/niut_TRACK_STATE";
  }

  static const char* value(const  ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# IDL enum ::niut::TRACK_STATE\n\
uint32 niut_NO_TRACKING = 0\n\
uint32 niut_POSE_SEARCH = 1\n\
uint32 niut_CALIBRATE = 2\n\
uint32 niut_TRACKING = 3\n\
\n\
uint32 value\n\
\n\
";
  }

  static const char* value(const  ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct niut_TRACK_STATE_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::humanMonitor::niut_TRACK_STATE_<ContainerAllocator> & v) 
  {
    s << indent << "value: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUMANMONITOR_MESSAGE_NIUT_TRACK_STATE_H

