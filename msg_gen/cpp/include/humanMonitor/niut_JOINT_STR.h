/* Auto-generated by genmsg_cpp for file /home/gmilliez/work/ros_workspace/humanMonitor/msg/niut_JOINT_STR.msg */
#ifndef HUMANMONITOR_MESSAGE_NIUT_JOINT_STR_H
#define HUMANMONITOR_MESSAGE_NIUT_JOINT_STR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "humanMonitor/niut_GEN_POINT_3D.h"

namespace humanMonitor
{
template <class ContainerAllocator>
struct niut_JOINT_STR_ {
  typedef niut_JOINT_STR_<ContainerAllocator> Type;

  niut_JOINT_STR_()
  : confidence(0.0)
  , position()
  {
  }

  niut_JOINT_STR_(const ContainerAllocator& _alloc)
  : confidence(0.0)
  , position(_alloc)
  {
  }

  typedef double _confidence_type;
  double confidence;

  typedef  ::humanMonitor::niut_GEN_POINT_3D_<ContainerAllocator>  _position_type;
   ::humanMonitor::niut_GEN_POINT_3D_<ContainerAllocator>  position;


  typedef boost::shared_ptr< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct niut_JOINT_STR
typedef  ::humanMonitor::niut_JOINT_STR_<std::allocator<void> > niut_JOINT_STR;

typedef boost::shared_ptr< ::humanMonitor::niut_JOINT_STR> niut_JOINT_STRPtr;
typedef boost::shared_ptr< ::humanMonitor::niut_JOINT_STR const> niut_JOINT_STRConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace humanMonitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9c2906bba163fd7b5eea616563d91fcd";
  }

  static const char* value(const  ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9c2906bba163fd7bULL;
  static const uint64_t static_value2 = 0x5eea616563d91fcdULL;
};

template<class ContainerAllocator>
struct DataType< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanMonitor/niut_JOINT_STR";
  }

  static const char* value(const  ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# IDL struct ::niut::JOINT_STR\n\
float64 confidence\n\
niut_GEN_POINT_3D position\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_GEN_POINT_3D\n\
# IDL struct ::niut::GEN_POINT_3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.confidence);
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct niut_JOINT_STR_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::humanMonitor::niut_JOINT_STR_<ContainerAllocator> & v) 
  {
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "position: ";
s << std::endl;
    Printer< ::humanMonitor::niut_GEN_POINT_3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUMANMONITOR_MESSAGE_NIUT_JOINT_STR_H

