/* Auto-generated by genmsg_cpp for file /home/gmilliez/work/ros_workspace/humanMonitor/msg/niut_HUMAN_LIST.msg */
#ifndef HUMANMONITOR_MESSAGE_NIUT_HUMAN_LIST_H
#define HUMANMONITOR_MESSAGE_NIUT_HUMAN_LIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "humanMonitor/niut_USER_STR.h"
#include "humanMonitor/niut_USER_STR.h"

namespace humanMonitor
{
template <class ContainerAllocator>
struct niut_HUMAN_LIST_ {
  typedef niut_HUMAN_LIST_<ContainerAllocator> Type;

  niut_HUMAN_LIST_()
  : watch_dog(0)
  , num(0)
  , users()
  , filtered_users()
  {
  }

  niut_HUMAN_LIST_(const ContainerAllocator& _alloc)
  : watch_dog(0)
  , num(0)
  , users()
  , filtered_users()
  {
    users.assign( ::humanMonitor::niut_USER_STR_<ContainerAllocator> (_alloc));
    filtered_users.assign( ::humanMonitor::niut_USER_STR_<ContainerAllocator> (_alloc));
  }

  typedef int32_t _watch_dog_type;
  int32_t watch_dog;

  typedef int32_t _num_type;
  int32_t num;

  typedef boost::array< ::humanMonitor::niut_USER_STR_<ContainerAllocator> , 16>  _users_type;
  boost::array< ::humanMonitor::niut_USER_STR_<ContainerAllocator> , 16>  users;

  typedef boost::array< ::humanMonitor::niut_USER_STR_<ContainerAllocator> , 16>  _filtered_users_type;
  boost::array< ::humanMonitor::niut_USER_STR_<ContainerAllocator> , 16>  filtered_users;


  typedef boost::shared_ptr< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct niut_HUMAN_LIST
typedef  ::humanMonitor::niut_HUMAN_LIST_<std::allocator<void> > niut_HUMAN_LIST;

typedef boost::shared_ptr< ::humanMonitor::niut_HUMAN_LIST> niut_HUMAN_LISTPtr;
typedef boost::shared_ptr< ::humanMonitor::niut_HUMAN_LIST const> niut_HUMAN_LISTConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace humanMonitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9442f7b60b19634aa64749beaf671cc9";
  }

  static const char* value(const  ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9442f7b60b19634aULL;
  static const uint64_t static_value2 = 0xa64749beaf671cc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanMonitor/niut_HUMAN_LIST";
  }

  static const char* value(const  ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# IDL struct ::niut::HUMAN_LIST\n\
int32 watch_dog\n\
int32 num\n\
niut_USER_STR[16] users\n\
niut_USER_STR[16] filtered_users\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_USER_STR\n\
# IDL struct ::niut::USER_STR\n\
int32 id\n\
int32 trackedId\n\
niut_TIME_STR date_discovered\n\
niut_TIME_STR date\n\
niut_TRACK_STATE state\n\
niut_SKELETON_STR skeleton\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_TIME_STR\n\
# IDL struct ::niut::TIME_STR\n\
uint32 t_sec\n\
uint32 t_usec\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_TRACK_STATE\n\
# IDL enum ::niut::TRACK_STATE\n\
uint32 niut_NO_TRACKING = 0\n\
uint32 niut_POSE_SEARCH = 1\n\
uint32 niut_CALIBRATE = 2\n\
uint32 niut_TRACKING = 3\n\
\n\
uint32 value\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_SKELETON_STR\n\
# IDL struct ::niut::SKELETON_STR\n\
niut_JOINT_STR[25] joint\n\
niut_JOINT unused\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_JOINT_STR\n\
# IDL struct ::niut::JOINT_STR\n\
float64 confidence\n\
niut_GEN_POINT_3D position\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_GEN_POINT_3D\n\
# IDL struct ::niut::GEN_POINT_3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: humanMonitor/niut_JOINT\n\
# IDL enum ::niut::JOINT\n\
uint32 niut_ZERO = 0\n\
uint32 niut_HEAD = 1\n\
uint32 niut_NECK = 2\n\
uint32 niut_TORSO = 3\n\
uint32 niut_WAIST = 4\n\
uint32 niut_LEFT_COLLAR = 5\n\
uint32 niut_LEFT_SHOULDER = 6\n\
uint32 niut_LEFT_ELBOW = 7\n\
uint32 niut_LEFT_WRIST = 8\n\
uint32 niut_LEFT_HAND = 9\n\
uint32 niut_LEFT_FINGERTIP = 10\n\
uint32 niut_RIGHT_COLLAR = 11\n\
uint32 niut_RIGHT_SHOULDER = 12\n\
uint32 niut_RIGHT_ELBOW = 13\n\
uint32 niut_RIGHT_WRIST = 14\n\
uint32 niut_RIGHT_HAND = 15\n\
uint32 niut_RIGHT_FINGERTIP = 16\n\
uint32 niut_LEFT_HIP = 17\n\
uint32 niut_LEFT_KNEE = 18\n\
uint32 niut_LEFT_ANKLE = 19\n\
uint32 niut_LEFT_FOOT = 20\n\
uint32 niut_RIGHT_HIP = 21\n\
uint32 niut_RIGHT_KNEE = 22\n\
uint32 niut_RIGHT_ANKLE = 23\n\
uint32 niut_RIGHT_FOOT = 24\n\
\n\
uint32 value\n\
\n\
";
  }

  static const char* value(const  ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.watch_dog);
    stream.next(m.num);
    stream.next(m.users);
    stream.next(m.filtered_users);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct niut_HUMAN_LIST_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::humanMonitor::niut_HUMAN_LIST_<ContainerAllocator> & v) 
  {
    s << indent << "watch_dog: ";
    Printer<int32_t>::stream(s, indent + "  ", v.watch_dog);
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "users[]" << std::endl;
    for (size_t i = 0; i < v.users.size(); ++i)
    {
      s << indent << "  users[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::humanMonitor::niut_USER_STR_<ContainerAllocator> >::stream(s, indent + "    ", v.users[i]);
    }
    s << indent << "filtered_users[]" << std::endl;
    for (size_t i = 0; i < v.filtered_users.size(); ++i)
    {
      s << indent << "  filtered_users[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::humanMonitor::niut_USER_STR_<ContainerAllocator> >::stream(s, indent + "    ", v.filtered_users[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUMANMONITOR_MESSAGE_NIUT_HUMAN_LIST_H

