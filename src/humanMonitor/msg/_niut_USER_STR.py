"""autogenerated by genpy from humanMonitor/niut_USER_STR.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import humanMonitor.msg

class niut_USER_STR(genpy.Message):
  _md5sum = "c73ff86e7f31e732cc4478587d7e6354"
  _type = "humanMonitor/niut_USER_STR"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# IDL struct ::niut::USER_STR
int32 id
int32 trackedId
niut_TIME_STR date_discovered
niut_TIME_STR date
niut_TRACK_STATE state
niut_SKELETON_STR skeleton

================================================================================
MSG: humanMonitor/niut_TIME_STR
# IDL struct ::niut::TIME_STR
uint32 t_sec
uint32 t_usec

================================================================================
MSG: humanMonitor/niut_TRACK_STATE
# IDL enum ::niut::TRACK_STATE
uint32 niut_NO_TRACKING = 0
uint32 niut_POSE_SEARCH = 1
uint32 niut_CALIBRATE = 2
uint32 niut_TRACKING = 3

uint32 value

================================================================================
MSG: humanMonitor/niut_SKELETON_STR
# IDL struct ::niut::SKELETON_STR
niut_JOINT_STR[25] joint
niut_JOINT unused

================================================================================
MSG: humanMonitor/niut_JOINT_STR
# IDL struct ::niut::JOINT_STR
float64 confidence
niut_GEN_POINT_3D position

================================================================================
MSG: humanMonitor/niut_GEN_POINT_3D
# IDL struct ::niut::GEN_POINT_3D
float64 x
float64 y
float64 z

================================================================================
MSG: humanMonitor/niut_JOINT
# IDL enum ::niut::JOINT
uint32 niut_ZERO = 0
uint32 niut_HEAD = 1
uint32 niut_NECK = 2
uint32 niut_TORSO = 3
uint32 niut_WAIST = 4
uint32 niut_LEFT_COLLAR = 5
uint32 niut_LEFT_SHOULDER = 6
uint32 niut_LEFT_ELBOW = 7
uint32 niut_LEFT_WRIST = 8
uint32 niut_LEFT_HAND = 9
uint32 niut_LEFT_FINGERTIP = 10
uint32 niut_RIGHT_COLLAR = 11
uint32 niut_RIGHT_SHOULDER = 12
uint32 niut_RIGHT_ELBOW = 13
uint32 niut_RIGHT_WRIST = 14
uint32 niut_RIGHT_HAND = 15
uint32 niut_RIGHT_FINGERTIP = 16
uint32 niut_LEFT_HIP = 17
uint32 niut_LEFT_KNEE = 18
uint32 niut_LEFT_ANKLE = 19
uint32 niut_LEFT_FOOT = 20
uint32 niut_RIGHT_HIP = 21
uint32 niut_RIGHT_KNEE = 22
uint32 niut_RIGHT_ANKLE = 23
uint32 niut_RIGHT_FOOT = 24

uint32 value

"""
  __slots__ = ['id','trackedId','date_discovered','date','state','skeleton']
  _slot_types = ['int32','int32','humanMonitor/niut_TIME_STR','humanMonitor/niut_TIME_STR','humanMonitor/niut_TRACK_STATE','humanMonitor/niut_SKELETON_STR']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,trackedId,date_discovered,date,state,skeleton

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(niut_USER_STR, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.trackedId is None:
        self.trackedId = 0
      if self.date_discovered is None:
        self.date_discovered = humanMonitor.msg.niut_TIME_STR()
      if self.date is None:
        self.date = humanMonitor.msg.niut_TIME_STR()
      if self.state is None:
        self.state = humanMonitor.msg.niut_TRACK_STATE()
      if self.skeleton is None:
        self.skeleton = humanMonitor.msg.niut_SKELETON_STR()
    else:
      self.id = 0
      self.trackedId = 0
      self.date_discovered = humanMonitor.msg.niut_TIME_STR()
      self.date = humanMonitor.msg.niut_TIME_STR()
      self.state = humanMonitor.msg.niut_TRACK_STATE()
      self.skeleton = humanMonitor.msg.niut_SKELETON_STR()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i5I.pack(_x.id, _x.trackedId, _x.date_discovered.t_sec, _x.date_discovered.t_usec, _x.date.t_sec, _x.date.t_usec, _x.state.value))
      for val1 in self.skeleton.joint:
        buff.write(_struct_d.pack(val1.confidence))
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_I.pack(self.skeleton.unused.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.date_discovered is None:
        self.date_discovered = humanMonitor.msg.niut_TIME_STR()
      if self.date is None:
        self.date = humanMonitor.msg.niut_TIME_STR()
      if self.state is None:
        self.state = humanMonitor.msg.niut_TRACK_STATE()
      if self.skeleton is None:
        self.skeleton = humanMonitor.msg.niut_SKELETON_STR()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.trackedId, _x.date_discovered.t_sec, _x.date_discovered.t_usec, _x.date.t_sec, _x.date.t_usec, _x.state.value,) = _struct_2i5I.unpack(str[start:end])
      self.skeleton.joint = []
      for i in range(0, 25):
        val1 = humanMonitor.msg.niut_JOINT_STR()
        start = end
        end += 8
        (val1.confidence,) = _struct_d.unpack(str[start:end])
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.skeleton.joint.append(val1)
      start = end
      end += 4
      (self.skeleton.unused.value,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i5I.pack(_x.id, _x.trackedId, _x.date_discovered.t_sec, _x.date_discovered.t_usec, _x.date.t_sec, _x.date.t_usec, _x.state.value))
      for val1 in self.skeleton.joint:
        buff.write(_struct_d.pack(val1.confidence))
        _v3 = val1.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_I.pack(self.skeleton.unused.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.date_discovered is None:
        self.date_discovered = humanMonitor.msg.niut_TIME_STR()
      if self.date is None:
        self.date = humanMonitor.msg.niut_TIME_STR()
      if self.state is None:
        self.state = humanMonitor.msg.niut_TRACK_STATE()
      if self.skeleton is None:
        self.skeleton = humanMonitor.msg.niut_SKELETON_STR()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.trackedId, _x.date_discovered.t_sec, _x.date_discovered.t_usec, _x.date.t_sec, _x.date.t_usec, _x.state.value,) = _struct_2i5I.unpack(str[start:end])
      self.skeleton.joint = []
      for i in range(0, 25):
        val1 = humanMonitor.msg.niut_JOINT_STR()
        start = end
        end += 8
        (val1.confidence,) = _struct_d.unpack(str[start:end])
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.skeleton.joint.append(val1)
      start = end
      end += 4
      (self.skeleton.unused.value,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
_struct_2i5I = struct.Struct("<2i5I")
_struct_d = struct.Struct("<d")
