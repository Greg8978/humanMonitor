"""autogenerated by genpy from humanMonitor/niut_JOINT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class niut_JOINT(genpy.Message):
  _md5sum = "0e470f210f9f1090b60cbbd9da53831f"
  _type = "humanMonitor/niut_JOINT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# IDL enum ::niut::JOINT
uint32 niut_ZERO = 0
uint32 niut_HEAD = 1
uint32 niut_NECK = 2
uint32 niut_TORSO = 3
uint32 niut_WAIST = 4
uint32 niut_LEFT_COLLAR = 5
uint32 niut_LEFT_SHOULDER = 6
uint32 niut_LEFT_ELBOW = 7
uint32 niut_LEFT_WRIST = 8
uint32 niut_LEFT_HAND = 9
uint32 niut_LEFT_FINGERTIP = 10
uint32 niut_RIGHT_COLLAR = 11
uint32 niut_RIGHT_SHOULDER = 12
uint32 niut_RIGHT_ELBOW = 13
uint32 niut_RIGHT_WRIST = 14
uint32 niut_RIGHT_HAND = 15
uint32 niut_RIGHT_FINGERTIP = 16
uint32 niut_LEFT_HIP = 17
uint32 niut_LEFT_KNEE = 18
uint32 niut_LEFT_ANKLE = 19
uint32 niut_LEFT_FOOT = 20
uint32 niut_RIGHT_HIP = 21
uint32 niut_RIGHT_KNEE = 22
uint32 niut_RIGHT_ANKLE = 23
uint32 niut_RIGHT_FOOT = 24

uint32 value

"""
  # Pseudo-constants
  niut_ZERO = 0
  niut_HEAD = 1
  niut_NECK = 2
  niut_TORSO = 3
  niut_WAIST = 4
  niut_LEFT_COLLAR = 5
  niut_LEFT_SHOULDER = 6
  niut_LEFT_ELBOW = 7
  niut_LEFT_WRIST = 8
  niut_LEFT_HAND = 9
  niut_LEFT_FINGERTIP = 10
  niut_RIGHT_COLLAR = 11
  niut_RIGHT_SHOULDER = 12
  niut_RIGHT_ELBOW = 13
  niut_RIGHT_WRIST = 14
  niut_RIGHT_HAND = 15
  niut_RIGHT_FINGERTIP = 16
  niut_LEFT_HIP = 17
  niut_LEFT_KNEE = 18
  niut_LEFT_ANKLE = 19
  niut_LEFT_FOOT = 20
  niut_RIGHT_HIP = 21
  niut_RIGHT_KNEE = 22
  niut_RIGHT_ANKLE = 23
  niut_RIGHT_FOOT = 24

  __slots__ = ['value']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(niut_JOINT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.value is None:
        self.value = 0
    else:
      self.value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.value,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.value,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
